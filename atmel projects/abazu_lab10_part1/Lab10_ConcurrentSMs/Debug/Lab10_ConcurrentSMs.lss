
Lab10_ConcurrentSMs.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000002b2  00000346  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800104  00800104  0000034a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000034a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000037c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ac9  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b0  00000000  00000000  00000ee5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003db  00000000  00000000  00001795  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  00001b70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000504  00000000  00000000  00001c34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f2  00000000  00000000  00002138  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000232a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	49 c0       	rjmp	.+146    	; 0xc8 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 eb       	ldi	r30, 0xB2	; 178
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 30       	cpi	r26, 0x0B	; 11
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	c2 d0       	rcall	.+388    	; 0x248 <main>
  c4:	f4 c0       	rjmp	.+488    	; 0x2ae <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_13>:
void TimerOff() {
	TCCR1B = 0x00;
}

void TimerISR() {
	TimerFlag = 1;
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
  d6:	af 93       	push	r26
  d8:	bf 93       	push	r27
  da:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_avr_timer_cntcurr>
  de:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_avr_timer_cntcurr+0x1>
  e2:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x2>
  e6:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_avr_timer_cntcurr+0x3>
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	a1 09       	sbc	r26, r1
  ee:	b1 09       	sbc	r27, r1
  f0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_cntcurr>
  f4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_cntcurr+0x1>
  f8:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_avr_timer_cntcurr+0x2>
  fc:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_avr_timer_cntcurr+0x3>
 100:	89 2b       	or	r24, r25
 102:	8a 2b       	or	r24, r26
 104:	8b 2b       	or	r24, r27
 106:	99 f4       	brne	.+38     	; 0x12e <__vector_13+0x66>
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <TimerFlag>
 10e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 112:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 116:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 11a:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 11e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_cntcurr>
 122:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_cntcurr+0x1>
 126:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_avr_timer_cntcurr+0x2>
 12a:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_avr_timer_cntcurr+0x3>
 12e:	bf 91       	pop	r27
 130:	af 91       	pop	r26
 132:	9f 91       	pop	r25
 134:	8f 91       	pop	r24
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <blinkLED>:
 140:	99 23       	and	r25, r25
 142:	34 f0       	brlt	.+12     	; 0x150 <blinkLED+0x10>
 144:	82 30       	cpi	r24, 0x02	; 2
 146:	91 05       	cpc	r25, r1
 148:	84 f0       	brlt	.+32     	; 0x16a <blinkLED+0x2a>
 14a:	82 30       	cpi	r24, 0x02	; 2
 14c:	91 05       	cpc	r25, r1
 14e:	39 f0       	breq	.+14     	; 0x15e <blinkLED+0x1e>
 150:	81 30       	cpi	r24, 0x01	; 1
 152:	91 05       	cpc	r25, r1
 154:	21 f0       	breq	.+8      	; 0x15e <blinkLED+0x1e>
 156:	82 30       	cpi	r24, 0x02	; 2
 158:	91 05       	cpc	r25, r1
 15a:	59 f4       	brne	.+22     	; 0x172 <blinkLED+0x32>
 15c:	06 c0       	rjmp	.+12     	; 0x16a <blinkLED+0x2a>
 15e:	88 e0       	ldi	r24, 0x08	; 8
 160:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	08 95       	ret
 16a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
 16e:	82 e0       	ldi	r24, 0x02	; 2
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	08 95       	ret

00000174 <threeLED>:
 174:	81 30       	cpi	r24, 0x01	; 1
 176:	91 05       	cpc	r25, r1
 178:	c9 f0       	breq	.+50     	; 0x1ac <threeLED+0x38>
 17a:	1c f4       	brge	.+6      	; 0x182 <threeLED+0xe>
 17c:	00 97       	sbiw	r24, 0x00	; 0
 17e:	81 f0       	breq	.+32     	; 0x1a0 <threeLED+0x2c>
 180:	06 c0       	rjmp	.+12     	; 0x18e <threeLED+0x1a>
 182:	82 30       	cpi	r24, 0x02	; 2
 184:	91 05       	cpc	r25, r1
 186:	c1 f0       	breq	.+48     	; 0x1b8 <threeLED+0x44>
 188:	83 30       	cpi	r24, 0x03	; 3
 18a:	91 05       	cpc	r25, r1
 18c:	49 f0       	breq	.+18     	; 0x1a0 <threeLED+0x2c>
 18e:	82 30       	cpi	r24, 0x02	; 2
 190:	91 05       	cpc	r25, r1
 192:	61 f0       	breq	.+24     	; 0x1ac <threeLED+0x38>
 194:	83 30       	cpi	r24, 0x03	; 3
 196:	91 05       	cpc	r25, r1
 198:	79 f0       	breq	.+30     	; 0x1b8 <threeLED+0x44>
 19a:	81 30       	cpi	r24, 0x01	; 1
 19c:	91 05       	cpc	r25, r1
 19e:	89 f4       	brne	.+34     	; 0x1c2 <threeLED+0x4e>
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <tmpA>
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	08 95       	ret
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <tmpA>
 1b2:	82 e0       	ldi	r24, 0x02	; 2
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	08 95       	ret
 1b8:	84 e0       	ldi	r24, 0x04	; 4
 1ba:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <tmpA>
 1be:	83 e0       	ldi	r24, 0x03	; 3
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	08 95       	ret

000001c4 <combineSM>:
 1c4:	00 97       	sbiw	r24, 0x00	; 0
 1c6:	39 f4       	brne	.+14     	; 0x1d6 <combineSM+0x12>
 1c8:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <__data_end>
 1cc:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <tmpA>
 1d0:	23 2b       	or	r18, r19
 1d2:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <__data_end>
 1d6:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__data_end>
 1da:	25 b9       	out	0x05, r18	; 5
 1dc:	08 95       	ret

000001de <TimerOn>:
 1de:	8b e0       	ldi	r24, 0x0B	; 11
 1e0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1e4:	8d e7       	ldi	r24, 0x7D	; 125
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1ec:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1f0:	82 e0       	ldi	r24, 0x02	; 2
 1f2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1f6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1fa:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 1fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 202:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 206:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 20a:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 20e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_cntcurr>
 212:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_cntcurr+0x1>
 216:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_avr_timer_cntcurr+0x2>
 21a:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_avr_timer_cntcurr+0x3>
 21e:	8f b7       	in	r24, 0x3f	; 63
 220:	80 68       	ori	r24, 0x80	; 128
 222:	8f bf       	out	0x3f, r24	; 63
 224:	08 95       	ret

00000226 <TimerSet>:
}


void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 226:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 22a:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 22e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 232:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 236:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <_avr_timer_cntcurr>
 23a:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <_avr_timer_cntcurr+0x1>
 23e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_avr_timer_cntcurr+0x2>
 242:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_avr_timer_cntcurr+0x3>
 246:	08 95       	ret

00000248 <main>:
int combineSM(int state);
static unsigned char tmpA;
static unsigned char tmpB;

int main(void) {
	DDRB = 0xFF; PORTB = 0x00;
 248:	8f ef       	ldi	r24, 0xFF	; 255
 24a:	84 b9       	out	0x04, r24	; 4
 24c:	15 b8       	out	0x05, r1	; 5

	TimerOn();
 24e:	c7 df       	rcall	.-114    	; 0x1de <TimerOn>
	TimerSet(100);
 250:	64 e6       	ldi	r22, 0x64	; 100
 252:	70 e0       	ldi	r23, 0x00	; 0
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	e6 df       	rcall	.-52     	; 0x226 <TimerSet>

	States state = bInit;
	SeqStates sState = seqInit;
	CombineStates cState = combine;
	unsigned short bPeriod = 1000;
	unsigned short thPeriod = 1000;
 25a:	08 ee       	ldi	r16, 0xE8	; 232
 25c:	13 e0       	ldi	r17, 0x03	; 3
	TimerSet(100);

	States state = bInit;
	SeqStates sState = seqInit;
	CombineStates cState = combine;
	unsigned short bPeriod = 1000;
 25e:	c8 ee       	ldi	r28, 0xE8	; 232
 260:	d3 e0       	ldi	r29, 0x03	; 3
	TimerOn();
	TimerSet(100);

	States state = bInit;
	SeqStates sState = seqInit;
	CombineStates cState = combine;
 262:	f1 2c       	mov	r15, r1

	TimerOn();
	TimerSet(100);

	States state = bInit;
	SeqStates sState = seqInit;
 264:	d1 2c       	mov	r13, r1
	DDRB = 0xFF; PORTB = 0x00;

	TimerOn();
	TimerSet(100);

	States state = bInit;
 266:	e1 2c       	mov	r14, r1
	CombineStates cState = combine;
	unsigned short bPeriod = 1000;
	unsigned short thPeriod = 1000;

	while(1) {
		if (bPeriod == 1000) {
 268:	c8 3e       	cpi	r28, 0xE8	; 232
 26a:	83 e0       	ldi	r24, 0x03	; 3
 26c:	d8 07       	cpc	r29, r24
 26e:	31 f4       	brne	.+12     	; 0x27c <main+0x34>
			state = blinkLED(state);
 270:	8e 2d       	mov	r24, r14
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	65 df       	rcall	.-310    	; 0x140 <blinkLED>
 276:	e8 2e       	mov	r14, r24
			bPeriod = 0;
 278:	c0 e0       	ldi	r28, 0x00	; 0
 27a:	d0 e0       	ldi	r29, 0x00	; 0
		}

		if (thPeriod == 1000) {
 27c:	08 3e       	cpi	r16, 0xE8	; 232
 27e:	83 e0       	ldi	r24, 0x03	; 3
 280:	18 07       	cpc	r17, r24
			sState = threeLED(sState);
 282:	31 f4       	brne	.+12     	; 0x290 <main+0x48>
 284:	8d 2d       	mov	r24, r13
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	75 df       	rcall	.-278    	; 0x174 <threeLED>
 28a:	d8 2e       	mov	r13, r24
			thPeriod = 0;
 28c:	00 e0       	ldi	r16, 0x00	; 0
		}
		cState = combineSM(cState);
 28e:	10 e0       	ldi	r17, 0x00	; 0
 290:	8f 2d       	mov	r24, r15
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	97 df       	rcall	.-210    	; 0x1c4 <combineSM>
 296:	f8 2e       	mov	r15, r24
		while(!TimerFlag) {}
 298:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <TimerFlag>
 29c:	88 23       	and	r24, r24
 29e:	e1 f3       	breq	.-8      	; 0x298 <main+0x50>
		TimerFlag = 0;
 2a0:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <TimerFlag>
		bPeriod += 100;
 2a4:	cc 59       	subi	r28, 0x9C	; 156
 2a6:	df 4f       	sbci	r29, 0xFF	; 255
		thPeriod += 100;
 2a8:	0c 59       	subi	r16, 0x9C	; 156
 2aa:	1f 4f       	sbci	r17, 0xFF	; 255
	}
 2ac:	dd cf       	rjmp	.-70     	; 0x268 <main+0x20>

000002ae <_exit>:
 2ae:	f8 94       	cli

000002b0 <__stop_program>:
 2b0:	ff cf       	rjmp	.-2      	; 0x2b0 <__stop_program>
